"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Input } from "@/components/ui/input"
import { Bug, AlertTriangle, Shield, Search, ExternalLink, Clock, Target, Zap, Server } from "lucide-react"

interface Vulnerability {
  id: string
  cve: string
  title: string
  description: string
  severity: "critical" | "high" | "medium" | "low"
  cvss: number
  service: string
  port: number
  exploit_available: boolean
  patch_available: boolean
  first_seen: string
  references: string[]
  solution: string
}

export function VulnerabilityAnalysis({ target }: { target: string }) {
  const [isScanning, setIsScanning] = useState(false)
  const [progress, setProgress] = useState(0)
  const [vulnerabilities, setVulnerabilities] = useState<Vulnerability[]>([])
  const [filteredVulns, setFilteredVulns] = useState<Vulnerability[]>([])
  const [searchTerm, setSearchTerm] = useState("")
  const [severityFilter, setSeverityFilter] = useState<string>("all")

  const mockVulnerabilities: Vulnerability[] = [
    {
      id: "vuln-001",
      cve: "CVE-2021-44228",
      title: "Apache Log4j2 Remote Code Execution",
      description:
        "Apache Log4j2 <=2.14.1 JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints.",
      severity: "critical",
      cvss: 10.0,
      service: "HTTP",
      port: 8080,
      exploit_available: true,
      patch_available: true,
      first_seen: "2024-01-15",
      references: ["https://nvd.nist.gov/vuln/detail/CVE-2021-44228"],
      solution: "Upgrade to Log4j 2.15.0 or later, or remove JndiLookup class from classpath",
    },
    {
      id: "vuln-002",
      cve: "CVE-2022-22965",
      title: "Spring Framework Remote Code Execution",
      description:
        "A Spring MVC or Spring WebFlux application running on JDK 9+ may be vulnerable to remote code execution (RCE) via data binding on JDK 9+.",
      severity: "critical",
      cvss: 9.8,
      service: "HTTP",
      port: 80,
      exploit_available: true,
      patch_available: true,
      first_seen: "2024-01-16",
      references: ["https://nvd.nist.gov/vuln/detail/CVE-2022-22965"],
      solution: "Upgrade Spring Framework to 5.3.18+ or 5.2.20+",
    },
    {
      id: "vuln-003",
      cve: "CVE-2021-34527",
      title: "Windows Print Spooler Privilege Escalation",
      description:
        "Windows Print Spooler service fails to restrict access to functionality that allows users to add printers and related drivers.",
      severity: "high",
      cvss: 8.8,
      service: "SMB",
      port: 445,
      exploit_available: true,
      patch_available: true,
      first_seen: "2024-01-17",
      references: ["https://nvd.nist.gov/vuln/detail/CVE-2021-34527"],
      solution: "Install Windows security updates KB5004945",
    },
    {
      id: "vuln-004",
      cve: "CVE-2023-23397",
      title: "Microsoft Outlook Privilege Escalation",
      description:
        "Microsoft Outlook for Windows is vulnerable to a privilege escalation attack that allows an attacker to access a user's Net-NTLMv2 hash.",
      severity: "high",
      cvss: 8.1,
      service: "SMTP",
      port: 25,
      exploit_available: false,
      patch_available: true,
      first_seen: "2024-01-18",
      references: ["https://nvd.nist.gov/vuln/detail/CVE-2023-23397"],
      solution: "Install Microsoft Outlook security updates",
    },
    {
      id: "vuln-005",
      cve: "CVE-2022-0847",
      title: "Linux Kernel Privilege Escalation (Dirty Pipe)",
      description:
        'A flaw was found in the way the "flags" member of the new pipe buffer structure was lacking proper initialization in copy_page_to_iter_pipe and push_pipe functions.',
      severity: "medium",
      cvss: 6.6,
      service: "SSH",
      port: 22,
      exploit_available: true,
      patch_available: true,
      first_seen: "2024-01-19",
      references: ["https://nvd.nist.gov/vuln/detail/CVE-2022-0847"],
      solution: "Update Linux kernel to version 5.16.11, 5.15.25, or 5.10.102",
    },
  ]

  const startVulnerabilityAssessment = async () => {
    setIsScanning(true)
    setProgress(0)
    setVulnerabilities([])

    const phases = [
      "Initializing vulnerability database",
      "Scanning for known vulnerabilities",
      "Cross-referencing CVE database",
      "Analyzing exploit availability",
      "Generating risk assessment",
    ]

    for (let i = 0; i < phases.length; i++) {
      setProgress(((i + 1) / phases.length) * 100)
      await new Promise((resolve) => setTimeout(resolve, 2000))

      // Add vulnerabilities progressively
      if (i === 2) {
        setVulnerabilities(mockVulnerabilities.slice(0, 2))
      } else if (i === 3) {
        setVulnerabilities(mockVulnerabilities.slice(0, 4))
      } else if (i === 4) {
        setVulnerabilities(mockVulnerabilities)
      }
    }

    setIsScanning(false)
  }

  useEffect(() => {
    let filtered = vulnerabilities

    if (searchTerm) {
      filtered = filtered.filter(
        (vuln) =>
          vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
          vuln.cve.toLowerCase().includes(searchTerm.toLowerCase()) ||
          vuln.service.toLowerCase().includes(searchTerm.toLowerCase()),
      )
    }

    if (severityFilter !== "all") {
      filtered = filtered.filter((vuln) => vuln.severity === severityFilter)
    }

    setFilteredVulns(filtered)
  }, [vulnerabilities, searchTerm, severityFilter])

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "destructive"
      case "high":
        return "destructive"
      case "medium":
        return "secondary"
      case "low":
        return "outline"
      default:
        return "outline"
    }
  }

  const getSeverityIcon = (severity: string) => {
    switch (severity) {
      case "critical":
        return <AlertTriangle className="h-4 w-4 text-red-500" />
      case "high":
        return <AlertTriangle className="h-4 w-4 text-orange-500" />
      case "medium":
        return <AlertTriangle className="h-4 w-4 text-yellow-500" />
      case "low":
        return <AlertTriangle className="h-4 w-4 text-blue-500" />
      default:
        return <AlertTriangle className="h-4 w-4" />
    }
  }

  const criticalCount = vulnerabilities.filter((v) => v.severity === "critical").length
  const highCount = vulnerabilities.filter((v) => v.severity === "high").length
  const mediumCount = vulnerabilities.filter((v) => v.severity === "medium").length
  const lowCount = vulnerabilities.filter((v) => v.severity === "low").length

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Bug className="h-5 w-5" />
            <span>Vulnerability Assessment</span>
            <Badge variant="outline">Phase 3</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-sm text-muted-foreground">Target: {target}</p>
              <p className="text-sm text-muted-foreground">Database: NVD, ExploitDB, CVE Details</p>
            </div>
            <Button
              onClick={startVulnerabilityAssessment}
              disabled={isScanning}
              className="flex items-center space-x-2"
            >
              <Search className="h-4 w-4" />
              <span>{isScanning ? "Scanning..." : "Start Assessment"}</span>
            </Button>
          </div>

          {isScanning && (
            <div className="space-y-2">
              <Progress value={progress} className="w-full" />
              <p className="text-xs text-muted-foreground">{Math.round(progress)}% complete</p>
            </div>
          )}
        </CardContent>
      </Card>

      {vulnerabilities.length > 0 && (
        <>
          {/* Summary Cards */}
          <div className="grid gap-4 md:grid-cols-4">
            <Card>
              <CardContent className="p-4">
                <div className="flex items-center space-x-2">
                  <AlertTriangle className="h-5 w-5 text-red-500" />
                  <div>
                    <p className="text-2xl font-bold text-red-500">{criticalCount}</p>
                    <p className="text-xs text-muted-foreground">Critical</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4">
                <div className="flex items-center space-x-2">
                  <AlertTriangle className="h-5 w-5 text-orange-500" />
                  <div>
                    <p className="text-2xl font-bold text-orange-500">{highCount}</p>
                    <p className="text-xs text-muted-foreground">High</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4">
                <div className="flex items-center space-x-2">
                  <AlertTriangle className="h-5 w-5 text-yellow-500" />
                  <div>
                    <p className="text-2xl font-bold text-yellow-500">{mediumCount}</p>
                    <p className="text-xs text-muted-foreground">Medium</p>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="p-4">
                <div className="flex items-center space-x-2">
                  <Shield className="h-5 w-5 text-primary" />
                  <div>
                    <p className="text-2xl font-bold">{vulnerabilities.filter((v) => v.patch_available).length}</p>
                    <p className="text-xs text-muted-foreground">Patchable</p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>

          {/* Filters and Search */}
          <Card>
            <CardContent className="p-4">
              <div className="flex space-x-4">
                <div className="flex-1">
                  <Input
                    placeholder="Search vulnerabilities..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full"
                  />
                </div>
                <select
                  value={severityFilter}
                  onChange={(e) => setSeverityFilter(e.target.value)}
                  className="px-3 py-2 border rounded-md bg-background"
                >
                  <option value="all">All Severities</option>
                  <option value="critical">Critical</option>
                  <option value="high">High</option>
                  <option value="medium">Medium</option>
                  <option value="low">Low</option>
                </select>
              </div>
            </CardContent>
          </Card>

          {/* Vulnerability List */}
          <div className="space-y-4">
            {filteredVulns.map((vuln) => (
              <Card key={vuln.id}>
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex items-start space-x-3">
                      {getSeverityIcon(vuln.severity)}
                      <div>
                        <CardTitle className="text-lg">{vuln.title}</CardTitle>
                        <div className="flex items-center space-x-2 mt-1">
                          <Badge variant="outline" className="font-mono text-xs">
                            {vuln.cve}
                          </Badge>
                          <Badge variant={getSeverityColor(vuln.severity) as any}>{vuln.severity.toUpperCase()}</Badge>
                          <Badge variant="secondary">CVSS {vuln.cvss}</Badge>
                        </div>
                      </div>
                    </div>
                    <div className="flex items-center space-x-2">
                      {vuln.exploit_available && (
                        <Badge variant="destructive" className="text-xs">
                          <Zap className="h-3 w-3 mr-1" />
                          Exploit Available
                        </Badge>
                      )}
                      {vuln.patch_available && (
                        <Badge variant="secondary" className="text-xs">
                          <Shield className="h-3 w-3 mr-1" />
                          Patch Available
                        </Badge>
                      )}
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  <p className="text-sm text-muted-foreground">{vuln.description}</p>

                  <div className="grid gap-4 md:grid-cols-2">
                    <div>
                      <h4 className="font-medium mb-2">Affected Service</h4>
                      <div className="flex items-center space-x-2">
                        <Server className="h-4 w-4 text-muted-foreground" />
                        <span className="text-sm">
                          {vuln.service} (Port {vuln.port})
                        </span>
                      </div>
                    </div>

                    <div>
                      <h4 className="font-medium mb-2">Discovery</h4>
                      <div className="flex items-center space-x-2">
                        <Clock className="h-4 w-4 text-muted-foreground" />
                        <span className="text-sm">First seen: {vuln.first_seen}</span>
                      </div>
                    </div>
                  </div>

                  <div>
                    <h4 className="font-medium mb-2">Solution</h4>
                    <p className="text-sm bg-muted p-3 rounded">{vuln.solution}</p>
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <Button variant="outline" size="sm">
                        <ExternalLink className="h-3 w-3 mr-1" />
                        View CVE Details
                      </Button>
                      {vuln.exploit_available && (
                        <Button variant="outline" size="sm">
                          <Target className="h-3 w-3 mr-1" />
                          View Exploits
                        </Button>
                      )}
                    </div>
                    <div className="text-xs text-muted-foreground">Risk Score: {vuln.cvss}/10.0</div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </>
      )}
    </div>
  )
}
